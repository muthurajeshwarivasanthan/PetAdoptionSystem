// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: petadoption.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sellerservice_CreateSeller_FullMethodName = "/sellerservice/CreateSeller"
	Sellerservice_GetSeller_FullMethodName    = "/sellerservice/GetSeller"
	Sellerservice_ListSeller_FullMethodName   = "/sellerservice/ListSeller"
	Sellerservice_UpdateUser_FullMethodName   = "/sellerservice/UpdateUser"
	Sellerservice_DeleteSeller_FullMethodName = "/sellerservice/DeleteSeller"
)

// SellerserviceClient is the client API for Sellerservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SellerService definition
type SellerserviceClient interface {
	// CRUD for Seller
	CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error)
	GetSeller(ctx context.Context, in *GetSellerIDRequest, opts ...grpc.CallOption) (*GetSellerIDResponse, error)
	ListSeller(ctx context.Context, in *UserEmpty, opts ...grpc.CallOption) (*ListSellerResponse, error)
	UpdateUser(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error)
	DeleteSeller(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error)
}

type sellerserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerserviceClient(cc grpc.ClientConnInterface) SellerserviceClient {
	return &sellerserviceClient{cc}
}

func (c *sellerserviceClient) CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSellerResponse)
	err := c.cc.Invoke(ctx, Sellerservice_CreateSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerserviceClient) GetSeller(ctx context.Context, in *GetSellerIDRequest, opts ...grpc.CallOption) (*GetSellerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSellerIDResponse)
	err := c.cc.Invoke(ctx, Sellerservice_GetSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerserviceClient) ListSeller(ctx context.Context, in *UserEmpty, opts ...grpc.CallOption) (*ListSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSellerResponse)
	err := c.cc.Invoke(ctx, Sellerservice_ListSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerserviceClient) UpdateUser(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSellerResponse)
	err := c.cc.Invoke(ctx, Sellerservice_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerserviceClient) DeleteSeller(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSellerResponse)
	err := c.cc.Invoke(ctx, Sellerservice_DeleteSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerserviceServer is the server API for Sellerservice service.
// All implementations must embed UnimplementedSellerserviceServer
// for forward compatibility.
//
// SellerService definition
type SellerserviceServer interface {
	// CRUD for Seller
	CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error)
	GetSeller(context.Context, *GetSellerIDRequest) (*GetSellerIDResponse, error)
	ListSeller(context.Context, *UserEmpty) (*ListSellerResponse, error)
	UpdateUser(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error)
	DeleteSeller(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error)
	mustEmbedUnimplementedSellerserviceServer()
}

// UnimplementedSellerserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSellerserviceServer struct{}

func (UnimplementedSellerserviceServer) CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedSellerserviceServer) GetSeller(context.Context, *GetSellerIDRequest) (*GetSellerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeller not implemented")
}
func (UnimplementedSellerserviceServer) ListSeller(context.Context, *UserEmpty) (*ListSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeller not implemented")
}
func (UnimplementedSellerserviceServer) UpdateUser(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSellerserviceServer) DeleteSeller(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeller not implemented")
}
func (UnimplementedSellerserviceServer) mustEmbedUnimplementedSellerserviceServer() {}
func (UnimplementedSellerserviceServer) testEmbeddedByValue()                       {}

// UnsafeSellerserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerserviceServer will
// result in compilation errors.
type UnsafeSellerserviceServer interface {
	mustEmbedUnimplementedSellerserviceServer()
}

func RegisterSellerserviceServer(s grpc.ServiceRegistrar, srv SellerserviceServer) {
	// If the following call pancis, it indicates UnimplementedSellerserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sellerservice_ServiceDesc, srv)
}

func _Sellerservice_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerserviceServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sellerservice_CreateSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerserviceServer).CreateSeller(ctx, req.(*CreateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sellerservice_GetSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerserviceServer).GetSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sellerservice_GetSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerserviceServer).GetSeller(ctx, req.(*GetSellerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sellerservice_ListSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerserviceServer).ListSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sellerservice_ListSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerserviceServer).ListSeller(ctx, req.(*UserEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sellerservice_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerserviceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sellerservice_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerserviceServer).UpdateUser(ctx, req.(*UpdateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sellerservice_DeleteSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerserviceServer).DeleteSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sellerservice_DeleteSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerserviceServer).DeleteSeller(ctx, req.(*DeleteSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sellerservice_ServiceDesc is the grpc.ServiceDesc for Sellerservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sellerservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sellerservice",
	HandlerType: (*SellerserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeller",
			Handler:    _Sellerservice_CreateSeller_Handler,
		},
		{
			MethodName: "GetSeller",
			Handler:    _Sellerservice_GetSeller_Handler,
		},
		{
			MethodName: "ListSeller",
			Handler:    _Sellerservice_ListSeller_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Sellerservice_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteSeller",
			Handler:    _Sellerservice_DeleteSeller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petadoption.proto",
}

const (
	Buyerservice_CreateBuyer_FullMethodName = "/buyerservice/CreateBuyer"
	Buyerservice_GetBuyer_FullMethodName    = "/buyerservice/GetBuyer"
	Buyerservice_ListBuyer_FullMethodName   = "/buyerservice/ListBuyer"
	Buyerservice_UpdateBuyer_FullMethodName = "/buyerservice/UpdateBuyer"
	Buyerservice_DeleteBuyer_FullMethodName = "/buyerservice/DeleteBuyer"
)

// BuyerserviceClient is the client API for Buyerservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyerserviceClient interface {
	CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error)
	GetBuyer(ctx context.Context, in *GetBuyerIDRequest, opts ...grpc.CallOption) (*GetBuyerIDResponse, error)
	ListBuyer(ctx context.Context, in *UserEmpty, opts ...grpc.CallOption) (*ListBuyerResponse, error)
	UpdateBuyer(ctx context.Context, in *UpdateBuyerRequest, opts ...grpc.CallOption) (*UpdateBuyerResponse, error)
	DeleteBuyer(ctx context.Context, in *DeleteBuyerRequest, opts ...grpc.CallOption) (*DeleteBuyerResponse, error)
}

type buyerserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyerserviceClient(cc grpc.ClientConnInterface) BuyerserviceClient {
	return &buyerserviceClient{cc}
}

func (c *buyerserviceClient) CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBuyerResponse)
	err := c.cc.Invoke(ctx, Buyerservice_CreateBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerserviceClient) GetBuyer(ctx context.Context, in *GetBuyerIDRequest, opts ...grpc.CallOption) (*GetBuyerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBuyerIDResponse)
	err := c.cc.Invoke(ctx, Buyerservice_GetBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerserviceClient) ListBuyer(ctx context.Context, in *UserEmpty, opts ...grpc.CallOption) (*ListBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBuyerResponse)
	err := c.cc.Invoke(ctx, Buyerservice_ListBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerserviceClient) UpdateBuyer(ctx context.Context, in *UpdateBuyerRequest, opts ...grpc.CallOption) (*UpdateBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBuyerResponse)
	err := c.cc.Invoke(ctx, Buyerservice_UpdateBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerserviceClient) DeleteBuyer(ctx context.Context, in *DeleteBuyerRequest, opts ...grpc.CallOption) (*DeleteBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBuyerResponse)
	err := c.cc.Invoke(ctx, Buyerservice_DeleteBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyerserviceServer is the server API for Buyerservice service.
// All implementations must embed UnimplementedBuyerserviceServer
// for forward compatibility.
type BuyerserviceServer interface {
	CreateBuyer(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error)
	GetBuyer(context.Context, *GetBuyerIDRequest) (*GetBuyerIDResponse, error)
	ListBuyer(context.Context, *UserEmpty) (*ListBuyerResponse, error)
	UpdateBuyer(context.Context, *UpdateBuyerRequest) (*UpdateBuyerResponse, error)
	DeleteBuyer(context.Context, *DeleteBuyerRequest) (*DeleteBuyerResponse, error)
	mustEmbedUnimplementedBuyerserviceServer()
}

// UnimplementedBuyerserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBuyerserviceServer struct{}

func (UnimplementedBuyerserviceServer) CreateBuyer(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyer not implemented")
}
func (UnimplementedBuyerserviceServer) GetBuyer(context.Context, *GetBuyerIDRequest) (*GetBuyerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyer not implemented")
}
func (UnimplementedBuyerserviceServer) ListBuyer(context.Context, *UserEmpty) (*ListBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuyer not implemented")
}
func (UnimplementedBuyerserviceServer) UpdateBuyer(context.Context, *UpdateBuyerRequest) (*UpdateBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyer not implemented")
}
func (UnimplementedBuyerserviceServer) DeleteBuyer(context.Context, *DeleteBuyerRequest) (*DeleteBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuyer not implemented")
}
func (UnimplementedBuyerserviceServer) mustEmbedUnimplementedBuyerserviceServer() {}
func (UnimplementedBuyerserviceServer) testEmbeddedByValue()                      {}

// UnsafeBuyerserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyerserviceServer will
// result in compilation errors.
type UnsafeBuyerserviceServer interface {
	mustEmbedUnimplementedBuyerserviceServer()
}

func RegisterBuyerserviceServer(s grpc.ServiceRegistrar, srv BuyerserviceServer) {
	// If the following call pancis, it indicates UnimplementedBuyerserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Buyerservice_ServiceDesc, srv)
}

func _Buyerservice_CreateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerserviceServer).CreateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buyerservice_CreateBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerserviceServer).CreateBuyer(ctx, req.(*CreateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buyerservice_GetBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerserviceServer).GetBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buyerservice_GetBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerserviceServer).GetBuyer(ctx, req.(*GetBuyerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buyerservice_ListBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerserviceServer).ListBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buyerservice_ListBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerserviceServer).ListBuyer(ctx, req.(*UserEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buyerservice_UpdateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerserviceServer).UpdateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buyerservice_UpdateBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerserviceServer).UpdateBuyer(ctx, req.(*UpdateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buyerservice_DeleteBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerserviceServer).DeleteBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Buyerservice_DeleteBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerserviceServer).DeleteBuyer(ctx, req.(*DeleteBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Buyerservice_ServiceDesc is the grpc.ServiceDesc for Buyerservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Buyerservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buyerservice",
	HandlerType: (*BuyerserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuyer",
			Handler:    _Buyerservice_CreateBuyer_Handler,
		},
		{
			MethodName: "GetBuyer",
			Handler:    _Buyerservice_GetBuyer_Handler,
		},
		{
			MethodName: "ListBuyer",
			Handler:    _Buyerservice_ListBuyer_Handler,
		},
		{
			MethodName: "UpdateBuyer",
			Handler:    _Buyerservice_UpdateBuyer_Handler,
		},
		{
			MethodName: "DeleteBuyer",
			Handler:    _Buyerservice_DeleteBuyer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petadoption.proto",
}

const (
	Petservice_CreatePet_FullMethodName = "/petservice/CreatePet"
	Petservice_GetPet_FullMethodName    = "/petservice/GetPet"
	Petservice_ListPet_FullMethodName   = "/petservice/ListPet"
	Petservice_UpdatePet_FullMethodName = "/petservice/UpdatePet"
	Petservice_DeletePet_FullMethodName = "/petservice/DeletePet"
)

// PetserviceClient is the client API for Petservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetserviceClient interface {
	CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error)
	GetPet(ctx context.Context, in *GetPetIDRequest, opts ...grpc.CallOption) (*GetPetIDResponse, error)
	ListPet(ctx context.Context, in *UserEmpty, opts ...grpc.CallOption) (*ListPetResponse, error)
	UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*UpdatePetResponse, error)
	DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetResponse, error)
}

type petserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetserviceClient(cc grpc.ClientConnInterface) PetserviceClient {
	return &petserviceClient{cc}
}

func (c *petserviceClient) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePetResponse)
	err := c.cc.Invoke(ctx, Petservice_CreatePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petserviceClient) GetPet(ctx context.Context, in *GetPetIDRequest, opts ...grpc.CallOption) (*GetPetIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPetIDResponse)
	err := c.cc.Invoke(ctx, Petservice_GetPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petserviceClient) ListPet(ctx context.Context, in *UserEmpty, opts ...grpc.CallOption) (*ListPetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPetResponse)
	err := c.cc.Invoke(ctx, Petservice_ListPet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petserviceClient) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*UpdatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePetResponse)
	err := c.cc.Invoke(ctx, Petservice_UpdatePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petserviceClient) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePetResponse)
	err := c.cc.Invoke(ctx, Petservice_DeletePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetserviceServer is the server API for Petservice service.
// All implementations must embed UnimplementedPetserviceServer
// for forward compatibility.
type PetserviceServer interface {
	CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error)
	GetPet(context.Context, *GetPetIDRequest) (*GetPetIDResponse, error)
	ListPet(context.Context, *UserEmpty) (*ListPetResponse, error)
	UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetResponse, error)
	DeletePet(context.Context, *DeletePetRequest) (*DeletePetResponse, error)
	mustEmbedUnimplementedPetserviceServer()
}

// UnimplementedPetserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetserviceServer struct{}

func (UnimplementedPetserviceServer) CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePet not implemented")
}
func (UnimplementedPetserviceServer) GetPet(context.Context, *GetPetIDRequest) (*GetPetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetserviceServer) ListPet(context.Context, *UserEmpty) (*ListPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPet not implemented")
}
func (UnimplementedPetserviceServer) UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedPetserviceServer) DeletePet(context.Context, *DeletePetRequest) (*DeletePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedPetserviceServer) mustEmbedUnimplementedPetserviceServer() {}
func (UnimplementedPetserviceServer) testEmbeddedByValue()                    {}

// UnsafePetserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetserviceServer will
// result in compilation errors.
type UnsafePetserviceServer interface {
	mustEmbedUnimplementedPetserviceServer()
}

func RegisterPetserviceServer(s grpc.ServiceRegistrar, srv PetserviceServer) {
	// If the following call pancis, it indicates UnimplementedPetserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Petservice_ServiceDesc, srv)
}

func _Petservice_CreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetserviceServer).CreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Petservice_CreatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetserviceServer).CreatePet(ctx, req.(*CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petservice_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetserviceServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Petservice_GetPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetserviceServer).GetPet(ctx, req.(*GetPetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petservice_ListPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetserviceServer).ListPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Petservice_ListPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetserviceServer).ListPet(ctx, req.(*UserEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petservice_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetserviceServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Petservice_UpdatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetserviceServer).UpdatePet(ctx, req.(*UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petservice_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetserviceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Petservice_DeletePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetserviceServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Petservice_ServiceDesc is the grpc.ServiceDesc for Petservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Petservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petservice",
	HandlerType: (*PetserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePet",
			Handler:    _Petservice_CreatePet_Handler,
		},
		{
			MethodName: "GetPet",
			Handler:    _Petservice_GetPet_Handler,
		},
		{
			MethodName: "ListPet",
			Handler:    _Petservice_ListPet_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _Petservice_UpdatePet_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _Petservice_DeletePet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petadoption.proto",
}

const (
	Adoptionservice_CreateAdoption_FullMethodName = "/Adoptionservice/CreateAdoption"
	Adoptionservice_GetAdoption_FullMethodName    = "/Adoptionservice/GetAdoption"
	Adoptionservice_ListAdoptions_FullMethodName  = "/Adoptionservice/ListAdoptions"
	Adoptionservice_UpdateAdoption_FullMethodName = "/Adoptionservice/UpdateAdoption"
	Adoptionservice_DeleteAdoption_FullMethodName = "/Adoptionservice/DeleteAdoption"
)

// AdoptionserviceClient is the client API for Adoptionservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdoptionserviceClient interface {
	CreateAdoption(ctx context.Context, in *CreateAdoptionRequest, opts ...grpc.CallOption) (*CreateAdoptionResponse, error)
	GetAdoption(ctx context.Context, in *GetAdoptionRequest, opts ...grpc.CallOption) (*GetAdoptionResponse, error)
	ListAdoptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAdoptionResponse, error)
	UpdateAdoption(ctx context.Context, in *UpdateAdoptionRequest, opts ...grpc.CallOption) (*UpdateAdoptionResponse, error)
	DeleteAdoption(ctx context.Context, in *DeleteAdoptionRequest, opts ...grpc.CallOption) (*DeleteAdoptionResponse, error)
}

type adoptionserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdoptionserviceClient(cc grpc.ClientConnInterface) AdoptionserviceClient {
	return &adoptionserviceClient{cc}
}

func (c *adoptionserviceClient) CreateAdoption(ctx context.Context, in *CreateAdoptionRequest, opts ...grpc.CallOption) (*CreateAdoptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdoptionResponse)
	err := c.cc.Invoke(ctx, Adoptionservice_CreateAdoption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adoptionserviceClient) GetAdoption(ctx context.Context, in *GetAdoptionRequest, opts ...grpc.CallOption) (*GetAdoptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdoptionResponse)
	err := c.cc.Invoke(ctx, Adoptionservice_GetAdoption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adoptionserviceClient) ListAdoptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAdoptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdoptionResponse)
	err := c.cc.Invoke(ctx, Adoptionservice_ListAdoptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adoptionserviceClient) UpdateAdoption(ctx context.Context, in *UpdateAdoptionRequest, opts ...grpc.CallOption) (*UpdateAdoptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdoptionResponse)
	err := c.cc.Invoke(ctx, Adoptionservice_UpdateAdoption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adoptionserviceClient) DeleteAdoption(ctx context.Context, in *DeleteAdoptionRequest, opts ...grpc.CallOption) (*DeleteAdoptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdoptionResponse)
	err := c.cc.Invoke(ctx, Adoptionservice_DeleteAdoption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdoptionserviceServer is the server API for Adoptionservice service.
// All implementations must embed UnimplementedAdoptionserviceServer
// for forward compatibility.
type AdoptionserviceServer interface {
	CreateAdoption(context.Context, *CreateAdoptionRequest) (*CreateAdoptionResponse, error)
	GetAdoption(context.Context, *GetAdoptionRequest) (*GetAdoptionResponse, error)
	ListAdoptions(context.Context, *Empty) (*ListAdoptionResponse, error)
	UpdateAdoption(context.Context, *UpdateAdoptionRequest) (*UpdateAdoptionResponse, error)
	DeleteAdoption(context.Context, *DeleteAdoptionRequest) (*DeleteAdoptionResponse, error)
	mustEmbedUnimplementedAdoptionserviceServer()
}

// UnimplementedAdoptionserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdoptionserviceServer struct{}

func (UnimplementedAdoptionserviceServer) CreateAdoption(context.Context, *CreateAdoptionRequest) (*CreateAdoptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdoption not implemented")
}
func (UnimplementedAdoptionserviceServer) GetAdoption(context.Context, *GetAdoptionRequest) (*GetAdoptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdoption not implemented")
}
func (UnimplementedAdoptionserviceServer) ListAdoptions(context.Context, *Empty) (*ListAdoptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdoptions not implemented")
}
func (UnimplementedAdoptionserviceServer) UpdateAdoption(context.Context, *UpdateAdoptionRequest) (*UpdateAdoptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdoption not implemented")
}
func (UnimplementedAdoptionserviceServer) DeleteAdoption(context.Context, *DeleteAdoptionRequest) (*DeleteAdoptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdoption not implemented")
}
func (UnimplementedAdoptionserviceServer) mustEmbedUnimplementedAdoptionserviceServer() {}
func (UnimplementedAdoptionserviceServer) testEmbeddedByValue()                         {}

// UnsafeAdoptionserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdoptionserviceServer will
// result in compilation errors.
type UnsafeAdoptionserviceServer interface {
	mustEmbedUnimplementedAdoptionserviceServer()
}

func RegisterAdoptionserviceServer(s grpc.ServiceRegistrar, srv AdoptionserviceServer) {
	// If the following call pancis, it indicates UnimplementedAdoptionserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Adoptionservice_ServiceDesc, srv)
}

func _Adoptionservice_CreateAdoption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdoptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptionserviceServer).CreateAdoption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adoptionservice_CreateAdoption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptionserviceServer).CreateAdoption(ctx, req.(*CreateAdoptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adoptionservice_GetAdoption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdoptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptionserviceServer).GetAdoption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adoptionservice_GetAdoption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptionserviceServer).GetAdoption(ctx, req.(*GetAdoptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adoptionservice_ListAdoptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptionserviceServer).ListAdoptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adoptionservice_ListAdoptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptionserviceServer).ListAdoptions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adoptionservice_UpdateAdoption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdoptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptionserviceServer).UpdateAdoption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adoptionservice_UpdateAdoption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptionserviceServer).UpdateAdoption(ctx, req.(*UpdateAdoptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adoptionservice_DeleteAdoption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdoptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdoptionserviceServer).DeleteAdoption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adoptionservice_DeleteAdoption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdoptionserviceServer).DeleteAdoption(ctx, req.(*DeleteAdoptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adoptionservice_ServiceDesc is the grpc.ServiceDesc for Adoptionservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adoptionservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Adoptionservice",
	HandlerType: (*AdoptionserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdoption",
			Handler:    _Adoptionservice_CreateAdoption_Handler,
		},
		{
			MethodName: "GetAdoption",
			Handler:    _Adoptionservice_GetAdoption_Handler,
		},
		{
			MethodName: "ListAdoptions",
			Handler:    _Adoptionservice_ListAdoptions_Handler,
		},
		{
			MethodName: "UpdateAdoption",
			Handler:    _Adoptionservice_UpdateAdoption_Handler,
		},
		{
			MethodName: "DeleteAdoption",
			Handler:    _Adoptionservice_DeleteAdoption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petadoption.proto",
}

const (
	PetHealthService_CreatePetHealth_FullMethodName = "/PetHealthService/CreatePetHealth"
	PetHealthService_GetPetHealth_FullMethodName    = "/PetHealthService/GetPetHealth"
	PetHealthService_ListPetHealth_FullMethodName   = "/PetHealthService/ListPetHealth"
	PetHealthService_UpdatePetHealth_FullMethodName = "/PetHealthService/UpdatePetHealth"
	PetHealthService_DeletePetHealth_FullMethodName = "/PetHealthService/DeletePetHealth"
)

// PetHealthServiceClient is the client API for PetHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetHealthServiceClient interface {
	CreatePetHealth(ctx context.Context, in *CreatePetHealthRequest, opts ...grpc.CallOption) (*CreatePetHealthResponse, error)
	GetPetHealth(ctx context.Context, in *GetPetHealthIDRequest, opts ...grpc.CallOption) (*GetPetHealthIDResponse, error)
	ListPetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPetHealthResponse, error)
	UpdatePetHealth(ctx context.Context, in *UpdatePetHealthRequest, opts ...grpc.CallOption) (*UpdatePetHealthResponse, error)
	DeletePetHealth(ctx context.Context, in *DeletePetHealthRequest, opts ...grpc.CallOption) (*DeletePetHealthResponse, error)
}

type petHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetHealthServiceClient(cc grpc.ClientConnInterface) PetHealthServiceClient {
	return &petHealthServiceClient{cc}
}

func (c *petHealthServiceClient) CreatePetHealth(ctx context.Context, in *CreatePetHealthRequest, opts ...grpc.CallOption) (*CreatePetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePetHealthResponse)
	err := c.cc.Invoke(ctx, PetHealthService_CreatePetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petHealthServiceClient) GetPetHealth(ctx context.Context, in *GetPetHealthIDRequest, opts ...grpc.CallOption) (*GetPetHealthIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPetHealthIDResponse)
	err := c.cc.Invoke(ctx, PetHealthService_GetPetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petHealthServiceClient) ListPetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPetHealthResponse)
	err := c.cc.Invoke(ctx, PetHealthService_ListPetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petHealthServiceClient) UpdatePetHealth(ctx context.Context, in *UpdatePetHealthRequest, opts ...grpc.CallOption) (*UpdatePetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePetHealthResponse)
	err := c.cc.Invoke(ctx, PetHealthService_UpdatePetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petHealthServiceClient) DeletePetHealth(ctx context.Context, in *DeletePetHealthRequest, opts ...grpc.CallOption) (*DeletePetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePetHealthResponse)
	err := c.cc.Invoke(ctx, PetHealthService_DeletePetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetHealthServiceServer is the server API for PetHealthService service.
// All implementations must embed UnimplementedPetHealthServiceServer
// for forward compatibility.
type PetHealthServiceServer interface {
	CreatePetHealth(context.Context, *CreatePetHealthRequest) (*CreatePetHealthResponse, error)
	GetPetHealth(context.Context, *GetPetHealthIDRequest) (*GetPetHealthIDResponse, error)
	ListPetHealth(context.Context, *emptypb.Empty) (*ListPetHealthResponse, error)
	UpdatePetHealth(context.Context, *UpdatePetHealthRequest) (*UpdatePetHealthResponse, error)
	DeletePetHealth(context.Context, *DeletePetHealthRequest) (*DeletePetHealthResponse, error)
	mustEmbedUnimplementedPetHealthServiceServer()
}

// UnimplementedPetHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetHealthServiceServer struct{}

func (UnimplementedPetHealthServiceServer) CreatePetHealth(context.Context, *CreatePetHealthRequest) (*CreatePetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePetHealth not implemented")
}
func (UnimplementedPetHealthServiceServer) GetPetHealth(context.Context, *GetPetHealthIDRequest) (*GetPetHealthIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetHealth not implemented")
}
func (UnimplementedPetHealthServiceServer) ListPetHealth(context.Context, *emptypb.Empty) (*ListPetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPetHealth not implemented")
}
func (UnimplementedPetHealthServiceServer) UpdatePetHealth(context.Context, *UpdatePetHealthRequest) (*UpdatePetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetHealth not implemented")
}
func (UnimplementedPetHealthServiceServer) DeletePetHealth(context.Context, *DeletePetHealthRequest) (*DeletePetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetHealth not implemented")
}
func (UnimplementedPetHealthServiceServer) mustEmbedUnimplementedPetHealthServiceServer() {}
func (UnimplementedPetHealthServiceServer) testEmbeddedByValue()                          {}

// UnsafePetHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetHealthServiceServer will
// result in compilation errors.
type UnsafePetHealthServiceServer interface {
	mustEmbedUnimplementedPetHealthServiceServer()
}

func RegisterPetHealthServiceServer(s grpc.ServiceRegistrar, srv PetHealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedPetHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PetHealthService_ServiceDesc, srv)
}

func _PetHealthService_CreatePetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetHealthServiceServer).CreatePetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetHealthService_CreatePetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetHealthServiceServer).CreatePetHealth(ctx, req.(*CreatePetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetHealthService_GetPetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetHealthIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetHealthServiceServer).GetPetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetHealthService_GetPetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetHealthServiceServer).GetPetHealth(ctx, req.(*GetPetHealthIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetHealthService_ListPetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetHealthServiceServer).ListPetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetHealthService_ListPetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetHealthServiceServer).ListPetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetHealthService_UpdatePetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetHealthServiceServer).UpdatePetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetHealthService_UpdatePetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetHealthServiceServer).UpdatePetHealth(ctx, req.(*UpdatePetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetHealthService_DeletePetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetHealthServiceServer).DeletePetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetHealthService_DeletePetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetHealthServiceServer).DeletePetHealth(ctx, req.(*DeletePetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetHealthService_ServiceDesc is the grpc.ServiceDesc for PetHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PetHealthService",
	HandlerType: (*PetHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePetHealth",
			Handler:    _PetHealthService_CreatePetHealth_Handler,
		},
		{
			MethodName: "GetPetHealth",
			Handler:    _PetHealthService_GetPetHealth_Handler,
		},
		{
			MethodName: "ListPetHealth",
			Handler:    _PetHealthService_ListPetHealth_Handler,
		},
		{
			MethodName: "UpdatePetHealth",
			Handler:    _PetHealthService_UpdatePetHealth_Handler,
		},
		{
			MethodName: "DeletePetHealth",
			Handler:    _PetHealthService_DeletePetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petadoption.proto",
}
